#!/bin/sh

#SCRIPT=$(readlink -f "$0")
#SCRIPTPATH=$(dirname "$SCRIPT")
#. "$SCRIPTPATH/.dbwebb.version"
. "bin/.dbwebb.version"

TESTS=0
ASSERTS=0
FAULTS=0

ECHO="printf"

TMPFILE="/tmp/dbwebb-error-{$USER}-$$"
# Remove old tmp files
find /tmp -maxdepth 1 -name 'dbwebb-error*' -user mosstud -type f -exec rm -f {} \; 

#export SUDO_ASKPASS=askpass
#SUDO="sudo -A -u dbwebb"
SUDO=""

WRAP_HEADER="\n\n\n-----------------------------------------"
WRAP_FOOTER="\n-----------------------------------------"



#
# Print usage of script
#
printUsage()
{
    $ECHO "\nUtility dbwebb-inspect $VERSION by Mikael Roos, to inspect course results as a teacher."
    $ECHO "\n"
    $ECHO "\nUsage: dbwebb-inspect [options] <item> <user>"
    $ECHO "\n"
    $ECHO "Options:"
    $ECHO "\n"
    $ECHO "\n  -h         Print this message and exit."
    $ECHO "\n  -v         Print version and exit."
    $ECHO "\n"
    $ECHO "\nItem:"
    $ECHO "\n"
    $ECHO "\n  kmom01    Inspect selected kmom."
    $ECHO "\n  kmom02    Inspect selected kmom."
    $ECHO "\n  kmom03    Inspect selected kmom."
    $ECHO "\n  kmom04    Inspect selected kmom."
    $ECHO "\n  kmom05    Inspect selected kmom."
    $ECHO "\n  kmom06    Inspect selected kmom."
    $ECHO "\n  kmom10    Inspect selected kmom."
    $ECHO "\n"
    $ECHO "\nExample:"
    $ECHO "\n"
    $ECHO "\n  $ dbwebb-inspect kmom01"
    $ECHO "\n  $ dbwebb-inspect kmom01 mosstud"
    $ECHO "\n"
    $ECHO "\n"
}



#
# Write header for each test
#
headerForTest()
{
    what="$1"

    $ECHO "$WRAP_HEADER"
    $ECHO "\n$what"
    $ECHO "$WRAP_FOOTER"
}


#
# Check the environment
#
checkEnvironment()
{
    $ECHO "\n"
    $ECHO "\n-----------------------------------------"
    $ECHO "\n----------- dbwebb inspect --------------"
    $ECHO "\n-----------------------------------------"

    # Check who you are
    if [ "$USER" = "$THEUSER" ]
    then
        $ECHO "\nChecking your own $KMOM, ok."
    else
        $ECHO "\nChecking $KMOM for $THEUSER as `whoami` at `hostname`."
    fi

    dirname="$THEDIR"
    if [ ! -d "$dirname" ] 
    then 
        $ECHO "\n\n$MSG_FAILED Directory $dirname not readable.\n\nPerhaps login to the studserver and execute the command:\nsudo setpre-dbwebb-kurser.bash $THEUSER"

        #$ECHO "\nFor debug:"
        #$ECHO "\n`whoami`\n"
        #$ECHO "\n`groups`\n"

        #dir="$( dirname $THEDIR )"
        #$ECHO "\n`ls -ld $dir`\n"
        #$ECHO "\n$dir is directory `test -d $dir; echo $?`\n"
        #$ECHO "\n$dir is readable `test -r $dir; echo $?`\n"

        #$ECHO "\n`ls -ld $THEDIR`\n"
        #$ECHO "\n$THEDIR is directory `test -d $THEDIR; echo $?`\n"
        #$ECHO "\n$THEDIR is readable `test -r $THEDIR; echo $?`\n"

        $ECHO "\n\nPress CTRL-C and fix it."
        read answer
    fi 

    $ECHO "\n"
    $ECHO "\nOpen files in an editor:"
    $ECHO "\n$EDITOR $dirname"

    $ECHO "\n"
    $ECHO "\nChange to directory:"
    $ECHO "\ncd $dirname"
}



#
# Publish kmom to webserver
#
publishKmom()
{
    target="$1"
    answer="$2"

    if [ -z "$answer" ]; then 
        $ECHO "\nPublish $THEKMOM [yN]? "

        read answer
        default="n"
        answer=${answer:-$default}
    else 
        $ECHO "\nPublishing $THEKMOM."
    fi;

    if [ "$answer" = "y" -o "$answer" = "Y" ]
    then
        rsync -a --delete "$THEDIR/$target/" "$PUBLISH_STUD/"
        
        for filename in $(find "$PUBLISH_STUD" -type f -name '*.cgi'); do
            chmod 755 "$filename"
        done

        url="$SERVERURL/~$USER/$BASEDIR/$STUD_DIR"
        $ECHO "\nLink: $url"

        $ECHO "\nOpen files in an editor:"
        $ECHO "\n$EDITOR $PUBLISH_STUD/"

        $ECHO "\nMove to the directory:"
        $ECHO "\ncd $PUBLISH_STUD/"
    fi
}



#
# Test check the kmom dir exists
#
checkKmomDir()
{
    dirname="$THEDIR/$1"
    assert 0 "test -r $dirname -a -d $dirname" "Directory $dirname not readable."
}



#
# Execute a command, maybe as another user
#
executeCommand()
{
    what="$1"
    move1="$2"
    acmd="$3"
    move2="$4"
    opts="$5"

    filename="$move1/$what"

    if [ -f "$filename" -o -r "$filename" ]; then
        $ECHO "\nExecute the program $what $opts [Yn]? "
        read answer
        default="y"
        answer=${answer:-$default}

        if [ "$answer" = "y" -o "$answer" = "Y" ]; then

            cd "$move1"

            if [ "$USER" = "$THEUSER" ]; then
                $acmd
            else
                $SUDO $acmd
            fi
            
            status=$?
            cd "$move2"

            if [ $status -eq 0 ]; then
                assert 1 "test" "Command executed successfully."
                $ECHO "\n\n$MSG_OK Command executed with a exit status 0  - indicating success.\n"
            else
                assert 0 "test" "Command return non-zero exit status which might indicate failure.\n"
            fi
        fi
    else
        assert 0 "test" "The file $what is missing or not readable."
    fi
}




#
# Test validate a kmom
#
validateKmom()
{
    THEKMOM="$1"

    $ECHO "\nValidate $THEKMOM [Yn]? "

    read answer
    default="y"
    answer=${answer:-$default}

    if [ "$answer" = "y" -o "$answer" = "Y" ]
    then
        bin/dbwebb-validate -i -n -m -e -t $THEKMOM $THEUSER
    fi
}



#
# Perform an assert
#
assert()
{
    EXPECTED=$1
    TEST=$2
    MESSAGE=$3
    ASSERTS=$(( $ASSERTS + 1 ))
    FAILED=0

    sh -c "$TEST" > "$TMPFILE" 2>&1
    STATUS=$?
    ERROR=$(cat $TMPFILE)

    if [ \( ! $STATUS -eq $EXPECTED \) -o \( ! -z "$ERROR" \) ]; then
        FAULTS=$(( $FAULTS + 1 ))

        MSG="\n\n$MSG_FAILED $MESSAGE\n"

        $ECHO "$MSG" 
        [ -z "$ERROR" ] || $ECHO "$ERROR\n\n"

        FAILED=1
    fi

    return $FAILED
}




#
# Perform an assert on exit value returned
#
assertExit()
{
    EXPECTED=$1
    TEST=$2
    MESSAGE=$3
    ASSERTS=$(( $ASSERTS + 1 ))
    FAILED=0

    sh -c "$TEST" > "/dev/null" 2>&1
    STATUS=$?

    if [ $STATUS -ne $EXPECTED ]; then
        FAULTS=$(( $FAULTS + 1 ))

        $ECHO "\n\n$MSG_FAILED $MESSAGE\n"

        FAILED=1
    else 
        $ECHO "\n\n$MSG_OK\n"
    fi

    return $FAILED
}




#
# Main
#
if [ $# != 3 ]
then
    :
    #$ECHO
    #printUsage
fi

# Get settings from config-file
. "./.dbwebb.config"


# Get options
while getopts ":hinrv" opt
do
    case $opt in
        (h) 
            printUsage
            exit 0
            ;;

        (v) 
            $ECHO "$VERSION\n"
            exit 0
            ;;

        \?)
            $ECHO "\nInvalid option: -$OPTARG" >&2
            $ECHO "\n"
            $ECHO "\nUse the following to get help."
            $ECHO "\ndbwebb-validate -h"
            $ECHO "\n"
            $ECHO "\n"
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))


# Get path to dir to check
FAULTS=0
KMOM=$1
THEUSER=${2:=$USER}
THEDIR=`eval echo "~$THEUSER/$BASEDIR/$PROJECT"`

checkEnvironment


# Include course functions
. "./bin/dbwebb-inspect.$COURSE"

# Execute command
case "$KMOM" in
    kmom01)     "${COURSE}${KMOM}" "$KMOM" ;;
    kmom02)     "${COURSE}${KMOM}" "$KMOM" ;;
    kmom03)     "${COURSE}${KMOM}" "$KMOM" ;;
    kmom04)     "${COURSE}${KMOM}" "$KMOM" ;;
    kmom05)     "${COURSE}${KMOM}" "$KMOM" ;;
    kmom06)     "${COURSE}${KMOM}" "$KMOM" ;;
    kmom10)     "${COURSE}${KMOM}" "$KMOM" ;;
    *)          
        $ECHO "\n$MSG_FAILED Invalid kmom: $KMOM"
        printUsage
        exit 1 
        ;;
esac



# Clean up and output results
if [ $FAULTS -gt 0 ]
then
        $ECHO "\n\n$MSG_FAILED"
        STATUS=1

        $ECHO " Tests: $TESTS Asserts: $ASSERTS Faults: $FAULTS\n"
        exit $STATUS
fi

$ECHO "\n\n$MSG_OK"
$ECHO " Tests: $TESTS Asserts: $ASSERTS Faults: $FAULTS\n"
exit 0
